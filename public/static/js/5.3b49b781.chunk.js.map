{"version":3,"sources":["actions/instance.js","components/DashBoard/Instance/DetailInstance.js","containers/InstanceContainer/ActionContainer.js"],"names":["fetchInstancesRequest","_ref","Object","F_code_reactjs_PROJECT_Porject_iot_kof_dashboard_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","F_code_reactjs_PROJECT_Porject_iot_kof_dashboard_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","dispatch","token","fetchInstances","wrap","_context","prev","next","localStorage","getItem","apiCall","sent","data","error","fetchInstanceFailure","fetchIntancesSuccess","t0","stop","this","_x","apply","arguments","instances","type","INSTANCE","FETCH_INSTANCE_SUCCESS","payload","message","FETCH_INSTANCE_FAILURE","fetchNewInstanceRequest","_ref2","_callee2","_context2","fetchNewInstanceFailure","fetchNewInstance","_x2","newInstance","FETCH_NEW_INSTANCE_SUCCESS","FETCH_NEW_INSTANCE_FAILURE","getInstanceByIDRequest","_id","_ref3","_callee3","getInstance","_context3","concat","getInstanceByID","console","log","_x3","instance","DETAIL_INSTANCE","changeStatusRequest","idInstance","status","_ref4","_callee4","res","_context4","changeStatus","_x4","CHANGE_STATUS","changeUserRequest","_ref5","_callee5","_context5","changeUser","_x5","CHANGE_USER","changePasswordRequest","_ref6","_callee6","_context6","changePassword","_x6","CHANGE_PASSWORD","DetailInstance","state","owner","createAt","email","fullname","password","username","_onChangeStatus","_this","props","_onChangeUser","_onChangePassword","setState","_this2","react_default","createElement","react","className","Link","to","server","port","user","onClick","pwd","moment","format","Component","count","ActionContainer","_changeStatus","id","_changeUser","_changePassword","match","params","idInstace","Instance_DetailInstance","connect","ownProps"],"mappings":"qUAGaA,EAAwB,WACpC,sBAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAC,EAAMC,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAGCJ,EAAQM,aAAaC,QAAQ,SAH9BJ,EAAAE,KAAA,EAIsBG,YAAQ,YAAa,MAAO,KAAM,CAAER,UAJ1D,QAIDC,EAJCE,EAAAM,MAMeC,KAAKC,MAGlBZ,EAASa,EAAqB,kCADpCb,EAASc,EAAqBZ,EAAeS,KAAKA,OAR9CP,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAW,GAAAX,EAAA,SAYLJ,EAASa,EAAqB,kCAZzB,yBAAAT,EAAAY,SAAAjB,EAAAkB,KAAA,YAAP,gBAAAC,GAAA,OAAAzB,EAAA0B,MAAAF,KAAAG,YAAA,IAiBYN,EAAuB,SAAAO,GAEnC,MAAO,CACNC,KAAMC,IAASC,uBACfC,QAASJ,IAIER,EAAuB,SAAAa,GACnC,MAAO,CACNJ,KAAMC,IAASI,uBACfD,YAIWE,EAA0B,WACtC,sBAAAC,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAgC,EAAM9B,GAAN,IAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cAAAyB,EAAA1B,KAAA,EAECJ,EAAQM,aAAaC,QAAQ,SAF9BuB,EAAAzB,KAAA,EAGsBG,YAAQ,YAAa,OAAQ,KAAM,CAAER,UAH3D,QAGDC,EAHC6B,EAAArB,MAKeC,KAAKC,MAElBZ,EAASgC,KADfhC,EAASiC,EAAiB/B,EAAeS,KAAKA,OAN1CoB,EAAAzB,KAAA,gBAAAyB,EAAA1B,KAAA,EAAA0B,EAAAhB,GAAAgB,EAAA,SAUL/B,EAASgC,KAVJ,yBAAAD,EAAAf,SAAAc,EAAAb,KAAA,YAAP,gBAAAiB,GAAA,OAAAL,EAAAV,MAAAF,KAAAG,YAAA,IAeYa,EAAmB,SAAAE,GAC/B,MAAO,CACNb,KAAMC,IAASa,2BACfX,QAASU,IAIEH,EAA0B,WACtC,MAAO,CACNV,KAAMC,IAASc,2BACfX,QAAS,6BAIEY,EAAyB,SAACC,GACtC,sBAAAC,EAAA9C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAA2C,EAAMzC,GAAN,IAAAC,EAAAyC,EAAA,OAAA9C,EAAAC,EAAAM,KAAA,SAAAwC,GAAA,cAAAA,EAAAtC,KAAAsC,EAAArC,MAAA,cAAAqC,EAAAtC,KAAA,EAECJ,EAAQM,aAAaC,QAAQ,SAF9BmC,EAAArC,KAAA,EAGmBG,YAAO,aAAAmC,OAAcL,GAAO,MAAO,KAAM,CAAEtC,UAH9D,QAGDyC,EAHCC,EAAAjC,MAKYC,KAAKC,OACrBZ,EAAS6C,EAAgBH,EAAY/B,KAAKA,OANtCgC,EAAArC,KAAA,gBAAAqC,EAAAtC,KAAA,EAAAsC,EAAA5B,GAAA4B,EAAA,SAULG,QAAQC,IAARJ,EAAA5B,IAVK,yBAAA4B,EAAA3B,SAAAyB,EAAAxB,KAAA,YAAP,gBAAA+B,GAAA,OAAAR,EAAArB,MAAAF,KAAAG,YAAA,IAeYyB,EAAkB,SAAAI,GAC9B,MAAO,CACN3B,KAAMC,IAAS2B,gBACfzB,QAASwB,IAIEE,EAAsB,SAACC,EAAYC,GAC/C,sBAAAC,EAAA5D,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAyD,EAAMvD,GAAN,IAAAC,EAAAuD,EAAA,OAAA5D,EAAAC,EAAAM,KAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAApD,KAAA,EAECJ,EAAQM,aAAaC,QAAQ,SAF9BiD,EAAAnD,KAAA,EAGWG,YAAO,aAAAmC,OAAcQ,EAAd,KAAAR,OAAuC,IAAXS,EAAe,EAAI,GAAK,MAAO,KAAM,CAAEpD,UAHrF,QAGDuD,EAHCC,EAAA/C,MAKIC,KAAKC,OACbZ,EAAS0D,EAAaF,EAAI7C,KAAKA,OAN3B8C,EAAAnD,KAAA,gBAAAmD,EAAApD,KAAA,EAAAoD,EAAA1C,GAAA0C,EAAA,SASLX,QAAQC,IAAI,CAACnC,MAAK6C,EAAA1C,KATb,yBAAA0C,EAAAzC,SAAAuC,EAAAtC,KAAA,YAAP,gBAAA0C,GAAA,OAAAL,EAAAnC,MAAAF,KAAAG,YAAA,IAcYsC,EAAe,SAAAT,GAC3B,MAAO,CACN3B,KAAMC,IAASqC,cACfnC,QAASwB,IAIEY,EAAoB,SAACT,GACjC,sBAAAU,EAAApE,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAiE,EAAM/D,GAAN,IAAAC,EAAAuD,EAAA,OAAA5D,EAAAC,EAAAM,KAAA,SAAA6D,GAAA,cAAAA,EAAA3D,KAAA2D,EAAA1D,MAAA,cAAA0D,EAAA3D,KAAA,EAECJ,EAAQM,aAAaC,QAAQ,SAF9BwD,EAAA1D,KAAA,EAGWG,YAAO,yBAAAmC,OAA0BQ,GAAc,MAAO,KAAM,CAAEnD,UAHzE,QAGDuD,EAHCQ,EAAAtD,MAIIC,KAAKC,OACbZ,EAASiE,EAAWT,EAAI7C,KAAKA,OALzBqD,EAAA1D,KAAA,gBAAA0D,EAAA3D,KAAA,EAAA2D,EAAAjD,GAAAiD,EAAA,SAQLlB,QAAQC,IAAI,CAACnC,MAAKoD,EAAAjD,KARb,yBAAAiD,EAAAhD,SAAA+C,EAAA9C,KAAA,YAAP,gBAAAiD,GAAA,OAAAJ,EAAA3C,MAAAF,KAAAG,YAAA,IAaY6C,EAAa,SAAAhB,GACzB,MAAO,CACN3B,KAAMC,IAAS4C,YACf1C,QAASwB,IAIEmB,EAAwB,SAAChB,GACrC,sBAAAiB,EAAA3E,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAO,SAAAwE,EAAMtE,GAAN,IAAAC,EAAAuD,EAAA,OAAA5D,EAAAC,EAAAM,KAAA,SAAAoE,GAAA,cAAAA,EAAAlE,KAAAkE,EAAAjE,MAAA,cAAAiE,EAAAlE,KAAA,EAECJ,EAAQM,aAAaC,QAAQ,SAF9B+D,EAAAjE,KAAA,EAGWG,YAAO,wBAAAmC,OAAyBQ,GAAc,MAAO,KAAM,CAAEnD,UAHxE,QAGDuD,EAHCe,EAAA7D,MAKIC,KAAKC,OACbZ,EAASwE,EAAehB,EAAI7C,KAAKA,OAN7B4D,EAAAjE,KAAA,gBAAAiE,EAAAlE,KAAA,EAAAkE,EAAAxD,GAAAwD,EAAA,SASLzB,QAAQC,IAAI,CAACnC,MAAK2D,EAAAxD,KATb,yBAAAwD,EAAAvD,SAAAsD,EAAArD,KAAA,YAAP,gBAAAwD,GAAA,OAAAJ,EAAAlD,MAAAF,KAAAG,YAAA,IAcYoD,EAAiB,SAAAvB,GAC7B,MAAO,CACN3B,KAAMC,IAASmD,gBACfjD,QAASwB,oIC1BI0B,6MA/GZC,MAAQ,CACLC,MAAO,CACJC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,SAAU,GACV5B,OAAQ,GACR6B,SAAU,GACV3C,IAAK,OAWX4C,gBAAkB,SAAC/B,EAAYC,GAC5B+B,EAAKC,MAAM3B,aAAaN,EAAYC,MAGvCiC,cAAgB,SAAClC,GACdgC,EAAKC,MAAMpB,WAAWb,MAGzBmC,kBAAoB,SAACnC,GAClBgC,EAAKC,MAAMb,eAAepB,uFAf1BnC,KAAKuE,SAAS,CACXX,MAAO5D,KAAKoE,MAAMpC,SAAS4B,yCAiBxB,IAAAY,EAAAxE,KACEgC,EAAahC,KAAKoE,MAAlBpC,SACA4B,EAAU5D,KAAK2D,MAAfC,MACJxB,EAASJ,EAASI,OAKtB,OAFAP,QAAQC,IAAIE,GAGTyC,EAAA7F,EAAA8F,cAACC,EAAA,SAAD,KACGF,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,WACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,mBACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,aACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,+CACZH,EAAA7F,EAAA8F,cAACG,EAAA,EAAD,CAAMC,GAAG,sBAAsBF,UAAU,wBAAzC,WAEHH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,aACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,uCACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,yBACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,eAAcH,EAAA7F,EAAA8F,cAAA,mCAC7BD,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,uBACZH,EAAA7F,EAAA8F,cAAA,MAAIE,UAAU,cAAd,YAAqC5C,EAAS+C,QAC9CN,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,cAAqC5C,EAASgD,KAA9C,KACAP,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,cAAqC5C,EAASiD,KAC3CR,EAAA7F,EAAA8F,cAAA,UAAQrE,KAAK,SAASuE,UAAU,oEAC7BM,QAAS,kBAAMV,EAAKH,cAAcrC,EAASV,OAD9C,WAIHmD,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,cAAqC5C,EAASmD,IAC3CV,EAAA7F,EAAA8F,cAAA,UAAQrE,KAAK,SAASuE,UAAU,oEAC7BM,QAAS,kBAAMV,EAAKF,kBAAkBtC,EAASV,OADlD,WAIHmD,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,cAAyD,IAApB5C,EAASI,OAC3CqC,EAAA7F,EAAA8F,cAAA,QAAME,UAAU,oBAAhB,uCACAH,EAAA7F,EAAA8F,cAAA,QAAME,UAAU,oBAAhB,qCACAH,EAAA7F,EAAA8F,cAAA,UAAQrE,KAAK,SAASuE,UAAU,oEAC7BM,QAAS,kBAAMV,EAAKN,gBAAgBlC,EAASV,IAAKc,KAAsB,IAAXA,EAAe,WAAQ,aAI1FqC,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,cAAqCQ,IAAOpD,EAAS6B,UAAUwB,OAAO,2BAAtE,QAKTZ,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,uCACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,4BACZH,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,eAAcH,EAAA7F,EAAA8F,cAAA,+BAC7BD,EAAA7F,EAAA8F,cAAA,OAAKE,UAAU,0BACZH,EAAA7F,EAAA8F,cAAA,MAAIE,UAAU,cAAd,SACAH,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA0ChB,EAAME,MAAhD,KACAW,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA0ChB,EAAMG,SAAhD,KACAU,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA0ChB,EAAMK,SAAhD,KACAQ,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA0ChB,EAAMI,SAAhD,KACAS,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA2D,IAAjBhB,EAAMxB,OAC7CqC,EAAA7F,EAAA8F,cAAA,QAAME,UAAU,uBAAhB,uCACEH,EAAA7F,EAAA8F,cAAA,QAAME,UAAU,oBAAhB,qCAFL,KAGAH,EAAA7F,EAAA8F,cAAA,KAAGE,UAAU,aAAb,mBAA0CQ,IAAOxB,EAAMC,UAAUwB,OAAO,2BAAxE,oBA1FJC,qBCEzBC,EAAQ,EAGNC,6MAWFC,cAAgB,SAACC,EAAItD,GACjB+B,EAAKC,MAAM3B,aAAaiD,EAAItD,MAGhCuD,YAAc,SAACD,GACXvB,EAAKC,MAAMpB,WAAW0C,MAG1BE,gBAAkB,SAACF,GACfvB,EAAKC,MAAMb,eAAemC,wFAlBT,IACTG,EAAU7F,KAAKoE,MAAfyB,MACR,GAAIA,EAAO,KACCC,EAAWD,EAAXC,OACR9F,KAAKoE,MAAM3C,YAAYqE,EAAOC,6CAiB7B,IAAAvB,EAAAxE,KACGgC,EAAahC,KAAKoE,MAAlBpC,SACR,OAAa,IAAVuD,GACCA,IACO,MAIPd,EAAA7F,EAAA8F,cAACC,EAAA,SAAD,KACIF,EAAA7F,EAAA8F,cAACsB,EAAD,CACIhE,SAAkBA,EAClBS,aAAkB,SAACN,EAAYC,GAAb,OAAwBoC,EAAKiB,cAActD,EAAYC,IACzEY,WAAkB,SAACb,GAAD,OAAgBqC,EAAKmB,YAAYxD,IACnDoB,eAAkB,SAACpB,GAAD,OAAgBqC,EAAKoB,gBAAgBzD,cApC7CmD,aAsEfW,sBAxBS,SAACtC,EAAOuC,GAC5B,MAAO,CACHlE,SAAU2B,EAAM3B,WAIG,SAACjD,EAAUmH,GAClC,MAAO,CACHzE,YAAa,SAAAU,GACTpD,EAASsC,YAAuBc,KAEpCM,aAAc,SAACN,EAAYC,GACvBrD,EAASmD,YAAoBC,EAAYC,KAE7CY,WAAY,SAAAb,GACRpD,EAAS6D,YAAkBT,KAE/BoB,eAAgB,SAAApB,GACZpD,EAASoE,YAAsBhB,OAM5B8D,CAA6CT","file":"static/js/5.3b49b781.chunk.js","sourcesContent":["import { INSTANCE } from '../constants/action-type';\r\nimport { apiCall } from '../utils/api-call';\r\n\r\nexport const fetchInstancesRequest = () => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\t// const token = 'Bearer '.concat(localStorage.getItem('token'));\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet fetchInstances = await apiCall('/instaces', 'GET', null, { token });\r\n\t\t\t// console.log(fetchInstances.data);\r\n\t\t\tif (!fetchInstances.data.error) {\r\n\t\t\t\t// console.log(fetchInstances.data.data);\r\n\t\t\t\tdispatch(fetchIntancesSuccess(fetchInstances.data.data));\r\n\t\t\t} else dispatch(fetchInstanceFailure('cannot get data from headers!'));\r\n\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(fetchInstanceFailure('cannot get data from headers!'));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const fetchIntancesSuccess = instances => {\r\n\t// console.log(instances)\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_INSTANCE_SUCCESS,\r\n\t\tpayload: instances\r\n\t}\r\n}\r\n\r\nexport const fetchInstanceFailure = message => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_INSTANCE_FAILURE,\r\n\t\tmessage\r\n\t}\r\n}\r\n\r\nexport const fetchNewInstanceRequest = () => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet fetchInstances = await apiCall('/instaces', 'POST', null, { token });\r\n\t\t\t// console.log(fetchInstances.data);\r\n\t\t\tif (!fetchInstances.data.error) {\r\n\t\t\t\tdispatch(fetchNewInstance(fetchInstances.data.data));\r\n\t\t\t} else dispatch(fetchNewInstanceFailure());\r\n\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(fetchNewInstanceFailure());\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const fetchNewInstance = newInstance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_NEW_INSTANCE_SUCCESS,\r\n\t\tpayload: newInstance\r\n\t}\r\n}\r\n\r\nexport const fetchNewInstanceFailure = () => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_NEW_INSTANCE_FAILURE,\r\n\t\tmessage: 'cannot get new instance!'\r\n\t}\r\n}\r\n\r\nexport const getInstanceByIDRequest = (_id) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet getInstance = await apiCall(`/instaces/${_id}`, 'GET', null, { token });\r\n\r\n\t\t\tif (!getInstance.data.error) {\r\n\t\t\t\tdispatch(getInstanceByID(getInstance.data.data));\r\n\t\t\t\t// history.push(`/dashboard/instance/${_id}`, { instance: getInstance.data.data });\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const getInstanceByID = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.DETAIL_INSTANCE,\r\n\t\tpayload: instance\r\n\t}\r\n}\r\n\r\nexport const changeStatusRequest = (idInstance, status) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/${idInstance}/${status === 1 ? 0 : 1}`, 'GET', null, { token })\r\n\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changeStatus(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({error});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changeStatus = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_STATUS,\r\n\t\tpayload: instance\r\n\t}\r\n}\r\n\r\nexport const changeUserRequest = (idInstance) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/update-user/${idInstance}`, 'GET', null, { token })\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changeUser(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({error});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changeUser = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_USER,\r\n\t\tpayload: instance\r\n\t}\r\n}\r\n\r\nexport const changePasswordRequest = (idInstance) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/update-pwd/${idInstance}`, 'GET', null, { token })\r\n\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changePassword(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({error});\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changePassword = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_PASSWORD,\r\n\t\tpayload: instance\r\n\t}\r\n}","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst propTypes = {\r\n   instance: PropTypes.object.isRequired,\r\n   changeStatus: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nclass DetailInstance extends Component {\r\n   state = {\r\n      owner: {\r\n         createAt: '',\r\n         email: '',\r\n         fullname: '',\r\n         password: '',\r\n         status: '',\r\n         username: '',\r\n         _id: ''\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.setState({\r\n         owner: this.props.instance.owner\r\n      })\r\n   }\r\n\r\n\r\n   _onChangeStatus = (idInstance, status) => {\r\n      this.props.changeStatus(idInstance, status);\r\n   }\r\n\r\n   _onChangeUser = (idInstance) => {\r\n      this.props.changeUser(idInstance);\r\n   }\r\n\r\n   _onChangePassword = (idInstance) => {\r\n      this.props.changePassword(idInstance);\r\n   }\r\n\r\n   render() {\r\n      const { instance } = this.props;\r\n      const { owner } = this.state;\r\n      let status = instance.status;\r\n    //   let user = instance.user;\r\n    //   let pwd = instance.pwd;\r\n      console.log(instance)\r\n\r\n      return (\r\n         <Fragment>\r\n            <div className=\"content\">\r\n               <div className=\"container-fluid\">\r\n                  <div className=\"container\">\r\n                     <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6  mt-100\">\r\n                        <Link to='/dashboard/instance' className=\"btn btn-outline-info\" >{`< Back`}</Link>\r\n                     </div>\r\n                     <div className=\"row mt-10\">\r\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                           <div className=\"card border-info mb-3\">\r\n                              <div className=\"card-header\"><h5>Information Instance</h5></div>\r\n                              <div className=\"card-body text-info\">\r\n                                 <h5 className=\"card-title\">SERVER : {instance.server}</h5>\r\n                                 <p className=\"card-text\">PORT     : {instance.port} </p>\r\n                                 <p className=\"card-text\">USER     : {instance.user}\r\n                                    <button type=\"button\" className=\"btn btn-outline-info btn-sm waves-effect waves-light align-button\"\r\n                                       onClick={() => this._onChangeUser(instance._id)} >Change\r\n                                    </button>\r\n                                 </p>\r\n                                 <p className=\"card-text\">PASSWORD : {instance.pwd}\r\n                                    <button type=\"button\" className=\"btn btn-outline-info btn-sm waves-effect waves-light align-button\"\r\n                                       onClick={() => this._onChangePassword(instance._id)} >Change\r\n                                    </button>\r\n                                 </p>\r\n                                 <p className=\"card-text\">STATUS   : {instance.status === 1 ?\r\n                                    <span className=\"badge badge-info\">Đã hoạt động</span> :\r\n                                    <span className=\"badge badge-dark\">Không hoạt động</span>}\r\n                                    <button type=\"button\" className=\"btn btn-outline-info btn-sm waves-effect waves-light align-button\"\r\n                                       onClick={() => this._onChangeStatus(instance._id, status)} >{status === 1 ? 'Tắt' : 'Bật'}\r\n                                    </button>\r\n                                 </p>\r\n\r\n                                 <p className=\"card-text\">CREATE AT: {moment(instance.createAt).format('MMMM Do YYYY, h:mm:ss a')} </p>\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                           <div className=\"card border-success mb-3\">\r\n                              <div className=\"card-header\"><h5>Information User</h5></div>\r\n                              <div className=\"card-body text-success\">\r\n                                 <h5 className=\"card-title\">Owner</h5>\r\n                                 <p className=\"card-text\">EMAIL         : {owner.email} </p>\r\n                                 <p className=\"card-text\">FULLNAME      : {owner.fullname} </p>\r\n                                 <p className=\"card-text\">USERNAME      : {owner.username} </p>\r\n                                 <p className=\"card-text\">PASSWORD      : {owner.password} </p>\r\n                                 <p className=\"card-text\">STATUS        : {owner.status === 1 ?\r\n                                    <span className=\"badge badge-success\">Đã hoạt động</span>\r\n                                    : <span className=\"badge badge-dark\">Không hoạt động</span>} </p>\r\n                                 <p className=\"card-text\">CREATE AT     : {moment(owner.createAt).format('MMMM Do YYYY, h:mm:ss a')} </p>\r\n                              </div>\r\n                           </div>\r\n\r\n                        </div>\r\n                     </div>\r\n\r\n                  </div>\r\n\r\n               </div>\r\n               {/* container-fluid */}\r\n            </div>\r\n\r\n         </Fragment>\r\n      );\r\n   }\r\n}\r\n\r\n\r\nDetailInstance.propTypes = propTypes;\r\n\r\n\r\nexport default DetailInstance;\r\n","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { changeStatusRequest, changeUserRequest, changePasswordRequest, getInstanceByIDRequest } from '../../actions/instance';\r\nimport DetailInstance from '../../components/DashBoard/Instance/DetailInstance';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst propTypes = {\r\n    instance: PropTypes.object.isRequired,\r\n    changeStatus: PropTypes.func.isRequired,\r\n    changeUser: PropTypes.func.isRequired,\r\n    changePassword: PropTypes.func.isRequired,\r\n};\r\n\r\nvar count = 0;\r\n\r\n\r\nclass ActionContainer extends Component {\r\n\r\n    componentWillMount() {\r\n        const { match } = this.props;\r\n        if (match) {\r\n            const { params } = match;\r\n            this.props.getInstance(params.idInstace);\r\n        }\r\n    }\r\n\r\n\r\n    _changeStatus = (id, status) => {\r\n        this.props.changeStatus(id, status);\r\n    }\r\n\r\n    _changeUser = (id) => {\r\n        this.props.changeUser(id);\r\n    }\r\n\r\n    _changePassword = (id) => {\r\n        this.props.changePassword(id);\r\n    }\r\n\r\n    render() {\r\n        const { instance } = this.props;\r\n        if(count === 0){\r\n            count ++;\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <DetailInstance\r\n                    instance       = {instance}\r\n                    changeStatus   = {(idInstance, status) => this._changeStatus(idInstance, status)}\r\n                    changeUser     = {(idInstance) => this._changeUser(idInstance)}\r\n                    changePassword = {(idInstance) => this._changePassword(idInstance)}\r\n                ></DetailInstance>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nActionContainer.propTypes = propTypes;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        instance: state.instance\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getInstance: idInstance => {\r\n            dispatch(getInstanceByIDRequest(idInstance))\r\n        },\r\n        changeStatus: (idInstance, status) => {\r\n            dispatch(changeStatusRequest(idInstance, status))\r\n        },\r\n        changeUser: idInstance => {\r\n            dispatch(changeUserRequest(idInstance))\r\n        },\r\n        changePassword: idInstance => {\r\n            dispatch(changePasswordRequest(idInstance))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionContainer);\r\n"],"sourceRoot":""}