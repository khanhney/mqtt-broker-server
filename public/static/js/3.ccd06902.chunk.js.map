{"version":3,"sources":["actions/instance.js","components/DashBoard/Instance/Instances.js","components/DashBoard/Instance/InstanceItem.js","components/DashBoard/Instance/NewInstance.js","containers/InstanceContainer/InstanceContainer.js"],"names":["fetchInstancesRequest","_ref","Object","_Users_apple_nodejs_mqtt_mqtt_basic_mqtt_cloud_react_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_apple_nodejs_mqtt_mqtt_basic_mqtt_cloud_react_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","dispatch","token","fetchInstances","wrap","_context","prev","next","localStorage","getItem","apiCall","sent","data","error","fetchInstanceFailure","fetchIntancesSuccess","t0","stop","this","_x","apply","arguments","instances","type","INSTANCE","FETCH_INSTANCE_SUCCESS","payload","message","FETCH_INSTANCE_FAILURE","fetchNewInstanceRequest","_ref2","_callee2","_context2","fetchNewInstanceFailure","fetchNewInstance","_x2","newInstance","FETCH_NEW_INSTANCE_SUCCESS","FETCH_NEW_INSTANCE_FAILURE","getInstanceByIDRequest","_id","_ref3","_callee3","getInstance","_context3","concat","getInstanceByID","console","log","_x3","instance","DETAIL_INSTANCE","changeStatusRequest","idInstance","status","_ref4","_callee4","res","_context4","changeStatus","_x4","CHANGE_STATUS","changeUserRequest","_ref5","_callee5","_context5","changeUser","_x5","CHANGE_USER","changePasswordRequest","_ref6","_callee6","_context6","changePassword","_x6","CHANGE_PASSWORD","Instance","react_default","createElement","react","className","props","lengthInstances","allInstance","Component","InstanceItem","_onDetailInstance","e","target","_this","history","push","_onChangeStatus","_this2","_this$props","index","onClick","style","cursor","server","port","user","length","substring","pwd","owner","username","NewInstance","_onCreateInstance","createInstance","placeholder","createAt","disabled","defaultValue","InstanceContainer","state","id","_changeStatus","_showInstanceItem","result","arrTemp","toConsumableArray","filter","item","map","Instance_InstanceItem","key","_showNewInstance","Instance_NewInstance","_createInstance","Instances","nextProps","prevState","undefined","connect","ownProps","detailInstance"],"mappings":"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","file":"static/js/3.ccd06902.chunk.js","sourcesContent":["import { INSTANCE } from '../constants/action-type';\r\nimport { apiCall } from '../utils/api-call';\r\n\r\n\r\n/**\r\n * get instances\r\n */\r\nexport const fetchInstancesRequest = () => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\t// const token = 'Bearer '.concat(localStorage.getItem('token'));\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet fetchInstances = await apiCall('/instaces', 'GET', null, { token });\r\n\t\t\tif (!fetchInstances.data.error) {\r\n\t\t\t\t// console.log(fetchInstances.data.data);\r\n\t\t\t\tdispatch(fetchIntancesSuccess(fetchInstances.data.data));\r\n\t\t\t} else {\r\n\t\t\t\t// console.log(fetchInstances.data);\r\n\t\t\t\tdispatch(fetchInstanceFailure('cannot get data from headers!'));\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(fetchInstanceFailure('cannot get data from headers!'));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const fetchIntancesSuccess = instances => {\r\n\t// console.log(instances)\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_INSTANCE_SUCCESS,\r\n\t\tpayload: instances\r\n\t}\r\n}\r\n\r\nexport const fetchInstanceFailure = message => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_INSTANCE_FAILURE,\r\n\t\tmessage\r\n\t}\r\n}\r\n\r\n/**\r\n * create new Intance\r\n */\r\n\r\nexport const fetchNewInstanceRequest = () => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet fetchInstances = await apiCall('/instaces', 'POST', null, { token });\r\n\r\n\t\t\tif (!fetchInstances.data.error) {\r\n\t\t\t\tdispatch(fetchNewInstance(fetchInstances.data.data));\r\n\t\t\t\tdispatch(fetchInstancesRequest());\r\n\t\t\t} else {\r\n\t\t\t\t// console.log('fetchNewInstanceFailure')\r\n\t\t\t\tdispatch(fetchNewInstanceFailure());\r\n\t\t\t}\r\n\r\n\t\t} catch (error) {\r\n\t\t\tdispatch(fetchNewInstanceFailure());\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const fetchNewInstance = newInstance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_NEW_INSTANCE_SUCCESS,\r\n\t\tpayload: newInstance,\r\n\t\tmessage: 'Thêm instance thành công!'\r\n\t}\r\n}\r\n\r\nexport const fetchNewInstanceFailure = () => {\r\n\treturn {\r\n\t\ttype: INSTANCE.FETCH_NEW_INSTANCE_FAILURE,\r\n\t\tmessage: 'Số lượng instance của bạn đã tạo tối đa!'\r\n\t}\r\n}\r\n\r\n/**\r\n * get instance by id\r\n */\r\nexport const getInstanceByIDRequest = _id => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet getInstance = await apiCall(`/instaces/instace-detail/${_id}`, 'GET', null, { token });\r\n\t\t\tif (!getInstance.data.error) {\r\n\t\t\t\tdispatch(getInstanceByID(getInstance.data.data));\r\n\t\t\t\t// history.push(`/dashboard/instance/${_id}`, { instance: getInstance.data.data });\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const getInstanceByID = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.DETAIL_INSTANCE,\r\n\t\tpayload: instance\r\n\t}\r\n}\r\n\r\n/**\r\n * change status\r\n */\r\nexport const changeStatusRequest = (idInstance, status) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/update-status/${idInstance}/${status === 1 ? 0 : 1}`, 'GET', null, { token })\r\n\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changeStatus(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({ error });\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changeStatus = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_STATUS,\r\n\t\tpayload: instance,\r\n\t\tmessage: 'Thay đổi trạng thái thành công!'\r\n\t}\r\n}\r\n\r\n/**\r\n * change user\r\n */\r\nexport const changeUserRequest = (idInstance) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/update-user/${idInstance}`, 'GET', null, { token })\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changeUser(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({ error });\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changeUser = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_USER,\r\n\t\tpayload: instance,\r\n\t\tmessage: 'Thay đổi người dùng thành công!'\r\n\t}\r\n}\r\n\r\n/**\r\n * change password\r\n */\r\nexport const changePasswordRequest = (idInstance) => {\r\n\treturn async dispatch => {\r\n\t\ttry {\r\n\t\t\tconst token = localStorage.getItem('token');\r\n\t\t\tlet res = await apiCall(`/instaces/update-pwd/${idInstance}`, 'GET', null, { token })\r\n\r\n\t\t\tif (!res.data.error) {\r\n\t\t\t\tdispatch(changePassword(res.data.data))\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log({ error });\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const changePassword = instance => {\r\n\treturn {\r\n\t\ttype: INSTANCE.CHANGE_PASSWORD,\r\n\t\tpayload: instance,\r\n\t\tmessage: 'Thay đổi mặt khẩu thành công!'\r\n\t}\r\n}","import React, { Component, Fragment } from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\n\r\n// const propTypes = {\r\n\r\n// };\r\n\r\n\r\nclass Instance extends Component {\r\n   render() {\r\n      return (\r\n         <Fragment>\r\n            <div className=\"content\">\r\n               <div className=\"container-fluid\">\r\n                  <div className=\"container\">\r\n                     <div className=\"row mt-100\">\r\n                        <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">\r\n                           <h2>All Instance</h2>\r\n\r\n                        </div>\r\n                        <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3 offset-md-6\">\r\n                           <div className=\"alert alert-info \">\r\n                              <strong>Số lượng:</strong> {this.props.lengthInstances}/5\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n\r\n                     {/* <p>Combine .table-dark and .table-striped to create a dark, striped table:</p> */}\r\n                     <table className=\"table table-dark table-striped table-hover\">\r\n                        <thead>\r\n                           <tr>\r\n                              <th>#</th>\r\n                              <th>Server</th>\r\n                              <th>Status</th>\r\n                              <th>Port</th>\r\n                              {/* <th>ID</th> */}\r\n                              <th>User</th>\r\n                              <th>Password</th>\r\n                              <th>Owner</th>\r\n                              <th>Action</th>\r\n                           </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                           {this.props.allInstance}\r\n                        </tbody>\r\n                     </table>\r\n                  </div>\r\n\r\n                  <div className=\"container\">\r\n\r\n                     {/* <p>Combine .table-dark and .table-striped to create a dark, striped table:</p> */}\r\n                     {this.props.newInstance}\r\n                  </div>\r\n\r\n               </div>\r\n               {/* container-fluid */}\r\n            </div>\r\n         </Fragment>\r\n      );\r\n   }\r\n}\r\n\r\n\r\n// Instance.propTypes = propTypes;\r\n\r\n\r\nexport default Instance;\r\n","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst propTypes = {\r\n  instance: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n};\r\n\r\nclass InstanceItem extends Component {\r\n\r\n  _onDetailInstance = (e) => {\r\n    const target = e.target;\r\n    if (target.type !== 'button') {\r\n      // console.log(target);\r\n      this.props.history.push(`/instance/${this.props.instance._id}`);\r\n    }\r\n  }\r\n\r\n  _onChangeStatus = (idInstance, status) => {\r\n    this.props.changeStatus(idInstance, status);\r\n  }\r\n\r\n  render() {\r\n    const { instance, index } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <tr onClick={this._onDetailInstance}  style={{cursor: 'pointer'}} >\r\n          <td>{index + 1}</td>\r\n          <td>{instance.server}</td>\r\n          <td>{instance.status === 1 ?\r\n            <span className=\"badge badge-success\">Đã hoạt động</span>\r\n            : <span className=\"badge badge-dark\">Không hoạt động</span>}</td>\r\n          <td>{instance.port}</td>\r\n          {/* <td>{instance._id}</td> */}\r\n          <td>{instance.user.length > 8 ? instance.user.substring(0, 8) + '***' : instance.user}</td>\r\n          <td>{instance.pwd.length > 8 ? instance.pwd.substring(0, 8) + '***' : instance.pwd}</td>\r\n          <td>{instance.owner.username}</td>\r\n          <td >\r\n            <button type=\"button\" className={`btn btn-outline-${instance.status === 1 ? 'danger' : 'success'}`}\r\n              onClick={() => this._onChangeStatus(instance._id, instance.status)} >\r\n              {instance.status === 1 ? 'Tắt' : 'Bật'}\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nInstanceItem.propTypes = propTypes;\r\n\r\n\r\nexport default InstanceItem;\r\n","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst propTypes = {\r\n   instance: PropTypes.object.isRequired\r\n};\r\n\r\n\r\nclass NewInstance extends Component {\r\n\r\n   _onCreateInstance = () => {\r\n      this.props.createInstance();\r\n   }\r\n\r\n   render() {\r\n      const { instance } = this.props;\r\n    //   console.log(instance);\r\n      return (\r\n         <Fragment>\r\n            <div className=\"card\">\r\n               <div className=\"card-header\">\r\n                  <h2>Create new Instance</h2>\r\n                  <button type=\"button\" className=\"btn btn-outline-success\" onClick={this._onCreateInstance} >Create Instance</button>\r\n               </div>\r\n               <div className=\"card-body\">\r\n                  <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                     <span className=\"badge badge-info mr-50\" placeholder='Server...'>{instance.server}</span>\r\n                     <span className=\"badge badge-info\" placeholder='Create_At...'>{instance.createAt}</span>\r\n                  </div>\r\n                  <form>\r\n                     <fieldset disabled >\r\n                        <div className=\"row\">\r\n                           <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                              <div className=\"form-group\">\r\n                                 <label >Owner</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance.owner} placeholder=\"Owner...\" />\r\n                              </div>\r\n                              <div className=\"form-group\">\r\n                                 <label >Status</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance.status} placeholder=\"Status...\" />\r\n                              </div>\r\n                           </div>\r\n\r\n                           <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                              <div className=\"form-group\">\r\n                                 <label >Port</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance.port} placeholder=\"Port...\" />\r\n                              </div>\r\n                              <div className=\"form-group\">\r\n                                 <label >ID</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance._id} placeholder=\"ID...\" />\r\n                              </div>\r\n                           </div>\r\n\r\n                           <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n                              <div className=\"form-group\">\r\n                                 <label >User</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance.user} placeholder=\"User...\" />\r\n                              </div>\r\n                              <div className=\"form-group\">\r\n                                 <label >Password</label>\r\n                                 <input type=\"text\" className=\"form-control\" defaultValue={instance.pwd} placeholder=\"Password...\" />\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </fieldset>\r\n                  </form>\r\n               </div>\r\n            </div>\r\n\r\n         </Fragment >\r\n      );\r\n   }\r\n}\r\n\r\n\r\nNewInstance.propTypes = propTypes;\r\n\r\n\r\nexport default NewInstance;\r\n","import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Instances from '../../components/DashBoard/Instance/Instances';\r\nimport { fetchInstancesRequest, fetchNewInstanceRequest, getInstanceByIDRequest, changeStatusRequest } from '../../actions/instance';\r\nimport { connect } from 'react-redux';\r\nimport InstanceItem from '../../components/DashBoard/Instance/InstanceItem';\r\nimport NewInstance from '../../components/DashBoard/Instance/NewInstance';\r\n\r\n\r\nconst propTypes = {\r\n    newInstance: PropTypes.object.isRequired,\r\n    instances: PropTypes.array.isRequired,\r\n    fetchInstancesRequest: PropTypes.func.isRequired,\r\n    fetchNewInstanceRequest: PropTypes.func.isRequired\r\n};\r\n\r\nclass InstanceContainer extends Component {\r\n    state = {\r\n        id: '',\r\n        status: ''\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.instance.status !== 'undefined' && nextProps.instance.status !== undefined) {\r\n            return {\r\n                id: nextProps.instance._id,\r\n                status: nextProps.instance.status\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchInstancesRequest();\r\n    }\r\n\r\n    _changeStatus = (id, status) => {\r\n        this.props.changeStatus(id, status);\r\n    }\r\n\r\n    _showInstanceItem = instances => {\r\n        var result = null;\r\n\r\n        let arrTemp = [...instances];\r\n\r\n        // change status\r\n        if (this.state.status !== '' && this.state.id !== '') {\r\n            // eslint-disable-next-line\r\n            instances.filter((item, index) => {\r\n                if (item._id === this.state.id) {\r\n                    arrTemp[index].status = this.state.status;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (arrTemp.length > 0) {\r\n            // console.log(instances.length);\r\n            result = arrTemp.map((item, index) => <InstanceItem\r\n                key={index}\r\n                index={index}\r\n                instance={item}\r\n                history={this.props.history}\r\n                changeStatus={(id, status) => this._changeStatus(id, status)}\r\n            />)\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    _showNewInstance = instance => {\r\n        return <NewInstance instance={instance} createInstance={this._createInstance} />\r\n    }\r\n\r\n    _createInstance = () => {\r\n        // if(instances.length > 5){\r\n        //     showToast('warning', 'Tối đa chỉ tạo được 5 instance');\r\n        // }else{\r\n        //     this.props.fetchNewInstanceRequest();\r\n        //     this.props.fetchInstancesRequest();\r\n        // }\r\n\r\n        this.props.fetchNewInstanceRequest();\r\n        // this.props.fetchInstancesRequest();\r\n    }\r\n\r\n    render() {\r\n        const { instances, newInstance } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <Instances lengthInstances={instances.length} allInstance={this._showInstanceItem(instances)} newInstance={this._showNewInstance(newInstance)} />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nInstanceContainer.propTypes = propTypes;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        instances: state.instances,\r\n        newInstance: state.newInstance,\r\n        getInstanceByID: state.detailInstance,\r\n        instance: state.instance\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchInstancesRequest: () => {\r\n            dispatch(fetchInstancesRequest())\r\n        },\r\n        fetchNewInstanceRequest: () => {\r\n            dispatch(fetchNewInstanceRequest())\r\n        },\r\n        getInstanceByIDRequest: (_id, history) => {\r\n            dispatch(getInstanceByIDRequest(_id, history))\r\n        },\r\n        changeStatus: (idInstance, status) => {\r\n            dispatch(changeStatusRequest(idInstance, status))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InstanceContainer);\r\n"],"sourceRoot":""}